#define NOTE_B0 31
#define NOTE_C1 33
#define NOTE_CS1 35
#define NOTE_D1 37
#define NOTE_DS1 39
#define NOTE_E1 41
#define NOTE_F1 44
#define NOTE_FS1 46
#define NOTE_G1 49
#define NOTE_GS1 52
#define NOTE_A1 55
#define NOTE_AS1 58
#define NOTE_B1 62
#define NOTE_C2 65
#define NOTE_CS2 69
#define NOTE_D2 73
#define NOTE_DS2 78
#define NOTE_E2 82
#define NOTE_F2 87
#define NOTE_FS2 93
#define NOTE_G2 98
#define NOTE_GS2 104
#define NOTE_A2 110
#define NOTE_AS2 117
#define NOTE_B2 123
#define NOTE_C3 131
#define NOTE_CS3 139
#define NOTE_D3 147
#define NOTE_DS3 156
#define NOTE_E3 165
#define NOTE_F3 175
#define NOTE_FS3 185
#define NOTE_G3 196
#define NOTE_GS3 208
#define NOTE_A3 220
#define NOTE_AS3 233
#define NOTE_B3 247
#define NOTE_C4 262
#define NOTE_CS4 277
#define NOTE_D4 294
#define NOTE_DS4 311
#define NOTE_E4 330
#define NOTE_F4 349
#define NOTE_FS4 370
#define NOTE_G4 392
#define NOTE_GS4 415
#define NOTE_A4 440
#define NOTE_AS4 466
#define NOTE_B4 494
#define NOTE_C5 523
#define NOTE_CS5 554
#define NOTE_D5 587
#define NOTE_DS5 622
#define NOTE_E5 659
#define NOTE_F5 698
#define NOTE_FS5 740
#define NOTE_G5 784
#define NOTE_GS5 831
#define NOTE_A5 880
#define NOTE_AS5 932
#define NOTE_B5 988
#define NOTE_C6 1047
#define NOTE_CS6 1109
#define NOTE_D6 1175
#define NOTE_DS6 1245
#define NOTE_E6 1319
#define NOTE_F6 1397
#define NOTE_FS6 1480
#define NOTE_G6 1568
#define NOTE_GS6 1661
#define NOTE_A6 1760
#define NOTE_AS6 1865
#define NOTE_B6 1976
#define NOTE_C7 2093
#define NOTE_CS7 2217
#define NOTE_D7 2349
#define NOTE_DS7 2489
#define NOTE_E7 2637
#define NOTE_F7 2794
#define NOTE_FS7 2960
#define NOTE_G7 3136
#define NOTE_GS7 3322
#define NOTE_A7 3520
#define NOTE_AS7 3729
#define NOTE_B7 3951
#define NOTE_C8 4186
#define NOTE_CS8 4435
#define NOTE_D8 4699
#define NOTE_DS8 4978



#define CHOICE_OFF      0 //Used to control LEDs
#define CHOICE_NONE     0 //Used to check buttons
#define CHOICE_RED  (1 << 0)
#define CHOICE_GREEN    (1 << 1)
#define CHOICE_BLUE (1 << 2)
#define CHOICE_YELLOW   (1 << 3)



#define LED_RED     10
#define LED_GREEN   3
#define LED_BLUE    13
#define LED_YELLOW  5



// Button pin definitions

#define BUTTON_RED    9
#define BUTTON_GREEN  2
#define BUTTON_BLUE   12
#define BUTTON_YELLOW 6



// Buzzer pin definitions

#define BUZZER1  4
#define BUZZER2  7



// Define game parameters

#define ROUNDS_TO_WIN      13 //Номера на рундовете преди играчът да спечели (13 рунда са абсолютно постижими) 
#define ENTRY_TIME_LIMIT   3000 //Времето в милисекунди за натискане на бутон



#define MODE_MEMORY  0


// Game state variables

byte gameMode = MODE_MEMORY; //По подразбиране се играе memory game-а
byte gameBoard[32]; //Съдържа всички възможни комбинации на четирите светлинки
byte gameRound = 0; //Брояч за успешните рундове на играча



void setup()

{

  //Хардуерната част се настройва съответно дали да приема или връща информация

  pinMode(BUTTON_RED, INPUT_PULLUP);
  
  pinMode(BUTTON_GREEN, INPUT_PULLUP);
  
  pinMode(BUTTON_BLUE, INPUT_PULLUP);
  
  pinMode(BUTTON_YELLOW, INPUT_PULLUP);



  pinMode(LED_RED, OUTPUT);

  pinMode(LED_GREEN, OUTPUT);

  pinMode(LED_BLUE, OUTPUT);

  pinMode(LED_YELLOW, OUTPUT);



  pinMode(BUZZER1, OUTPUT);

  pinMode(BUZZER2, OUTPUT);


  gameMode = MODE_MEMORY; // Задаваме да се играе за сега единственият game mode 

  play_winner(); // After setup is complete, say hello to the world

}



void loop()

{

  attractMode(); // Метод за примигващите светлинки в началото преди играча да е натиснал бутон и играта да е започнала



  //Индикатор за началото на играта 

  setLEDs(CHOICE_RED | CHOICE_GREEN | CHOICE_BLUE | CHOICE_YELLOW); //Включваме всички лампички

  delay(1000);

  setLEDs(CHOICE_OFF); //Изключваме всички лампички

  delay(250);



  if (gameMode == MODE_MEMORY)

  {

    if (play_memory() == true) 

      play_winner(); // Метод ако играча е победил, издава специална мекодия на победителя и лампичките светят в определен ред

    else 

      play_loser(); // Метод ако играча е загубил, издава специална мекодия на загубилия и лампичките светят в определен ред

  }
}

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

//От тук започва основната логика на играта за памет



// Връща 0 ако играча загуби или 1 ако играча спечели

boolean play_memory(void)

{

  randomSeed(millis()); // Рандъм генератор



  gameRound = 0; //ресетва брояча за рундовете



  while (gameRound < ROUNDS_TO_WIN) 

  {

    add_to_moves(); // Добавя нов рандъм бутон за натискане в играта



    playMoves(); //Игра ходовете досега



    //Тук е момента в който играта задължава да се повтори подредбата на светлинки

    for (byte currentMove = 0 ; currentMove < gameRound ; currentMove++)

    {

      byte choice = wait_for_button(); //Проверява кой бутон е натиснат



      if (choice == 0) return false; // Проверява дали времето е изтекло и ако е играчът автоматично губи



      if (choice != gameBoard[currentMove]) return false; //Ако играчът сбърка по време да подредбата също губи

    }



    delay(1000);

  }



  return true; //Играчът е минал през всички комбинации и печели

}


//Светва подредбата която трябва да бъде въведена

void playMoves(void)

{

  for (byte currentMove = 0 ; currentMove < gameRound ; currentMove++) 

  {

    toner(gameBoard[currentMove], 150);


    // Може времето между присветването на лампичките да бъде намалено за по-голяма трудност

    delay(150);

  }

}



//Добавя нов бутон към последователността от присветвания

void add_to_moves(void)

{

  byte newButton = random(0, 4); //Рандъм генерирана светлинка



  //Преобразуваме генерираните произволни числа в избори на бутон

  if(newButton == 0) newButton = CHOICE_RED;

  else if(newButton == 1) newButton = CHOICE_GREEN;

  else if(newButton == 2) newButton = CHOICE_BLUE;

  else if(newButton == 3) newButton = CHOICE_YELLOW;



  gameBoard[gameRound++] = newButton; //добавя новият бутон към масива за подредбата до този момент

}



//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

//С този метод контролираме състоянието на лед лампичките

void setLEDs(byte leds)

{

  if ((leds & CHOICE_RED) != 0)

    digitalWrite(LED_RED, HIGH);

  else

    digitalWrite(LED_RED, LOW);



  if ((leds & CHOICE_GREEN) != 0)

    digitalWrite(LED_GREEN, HIGH);

  else

    digitalWrite(LED_GREEN, LOW);



  if ((leds & CHOICE_BLUE) != 0)

    digitalWrite(LED_BLUE, HIGH);

  else

    digitalWrite(LED_BLUE, LOW);



  if ((leds & CHOICE_YELLOW) != 0)

    digitalWrite(LED_YELLOW, HIGH);

  else

    digitalWrite(LED_YELLOW, LOW);

}



//Този метод изчаква да бъде натиснат бутон. 

// Ако бъде натиснат връща съответният цвят, ако времето изтече връща 0

byte wait_for_button(void)

{

  long startTime = millis(); //Запомня милисекундите в които е започнал цикъла



  while ( (millis() - startTime) < ENTRY_TIME_LIMIT) //Върти цикъла докато изтече времето

  {

    byte button = checkButton();



    if (button != CHOICE_NONE)

    { 

      toner(button, 150); // Използва бутона който играчът е натиснал



      while(checkButton() != CHOICE_NONE) ;


      delay(10); // Този delay предотвратява проблема със случайното дбойно натискане на бутон


      return button;

    }



  }



  return CHOICE_NONE; //Ако се стигне до тук, значи времето е изтекло

}



//Проверява кой бутон е натиснат и връща съответния избор

byte checkButton(void)

{

  if (digitalRead(BUTTON_RED) == 0) return(CHOICE_RED); 

  else if (digitalRead(BUTTON_GREEN) == 0) return(CHOICE_GREEN); 

  else if (digitalRead(BUTTON_BLUE) == 0) return(CHOICE_BLUE); 

  else if (digitalRead(BUTTON_YELLOW) == 0) return(CHOICE_YELLOW);



  return(CHOICE_NONE);

}



// Честоти на звуците на лампичките

// Червена:     440Hz - 2.272ms - 1.136ms pulse

// Зелена:  880Hz - 1.136ms - 0.568ms pulse

// Синя:    587.33Hz - 1.702ms - 0.851ms pulse

// Жълта: 784Hz - 1.276ms - 0.638ms pulse

void toner(byte which, int buzz_length_ms)

{

  setLEDs(which);



  //Бъзера издава звук спрямо подадената лампичка

  switch(which) 

  {

  case CHOICE_RED:

    buzz_sound(buzz_length_ms, 1136); 

    break;

  case CHOICE_GREEN:

    buzz_sound(buzz_length_ms, 568); 

    break;

  case CHOICE_BLUE:

    buzz_sound(buzz_length_ms, 851); 

    break;

  case CHOICE_YELLOW:

    buzz_sound(buzz_length_ms, 638); 

    break;

  }



  setLEDs(CHOICE_OFF); //Изключва всички лампички

}



// Издава мелодия за период от buzz_length_ms

void buzz_sound(int buzz_length_ms, int buzz_delay_us)

{

  //Преобразува играното време от милисекунди в микросекунди

  long buzz_length_us = buzz_length_ms * (long)1000;



  // Завърта оставащото време докато не стане по малко от един buzz_delay_us

  while (buzz_length_us > (buzz_delay_us * 2))

  {

    buzz_length_us -= buzz_delay_us * 2; //Намаля оставащото време за игра


    digitalWrite(BUZZER1, LOW);

    digitalWrite(BUZZER2, HIGH);

    delayMicroseconds(buzz_delay_us);



    digitalWrite(BUZZER1, HIGH);

    digitalWrite(BUZZER2, LOW);

    delayMicroseconds(buzz_delay_us);

  }

}



//Метод за мелодията и лампичките на победителя

void play_winner(void)

{

  setLEDs(CHOICE_GREEN | CHOICE_BLUE);

  winner_sound();

  setLEDs(CHOICE_RED | CHOICE_YELLOW);

  winner_sound();

  setLEDs(CHOICE_GREEN | CHOICE_BLUE);

  winner_sound();

  setLEDs(CHOICE_RED | CHOICE_YELLOW);

  winner_sound();

}



// Мелодията на победителя


void winner_sound(void)

{

  //Задава на бъзера различна скорост

  for (byte x = 250 ; x > 70 ; x--)

  {

    for (byte y = 0 ; y < 3 ; y++)

    {

      digitalWrite(BUZZER2, HIGH);

      digitalWrite(BUZZER1, LOW);

      delayMicroseconds(x);



      digitalWrite(BUZZER2, LOW);

      digitalWrite(BUZZER1, HIGH);

      delayMicroseconds(x);

    }

  }

}



// Мотод за мелодията и лампичките на загубилия

void play_loser(void)

{

  setLEDs(CHOICE_RED | CHOICE_GREEN);

  buzz_sound(255, 1500);



  setLEDs(CHOICE_BLUE | CHOICE_YELLOW);

  buzz_sound(255, 1500);



  setLEDs(CHOICE_RED | CHOICE_GREEN);

  buzz_sound(255, 1500);



  setLEDs(CHOICE_BLUE | CHOICE_YELLOW);

  buzz_sound(255, 1500);

}



// Показва "attract mode" докато чака играча да натисне бутон

void attractMode(void)

{

  while(1) 

  {

    setLEDs(CHOICE_RED);

    delay(100);

    if (checkButton() != CHOICE_NONE) return;



    setLEDs(CHOICE_BLUE);

    delay(100);

    if (checkButton() != CHOICE_NONE) return;



    setLEDs(CHOICE_GREEN);

    delay(100);

    if (checkButton() != CHOICE_NONE) return;



    setLEDs(CHOICE_YELLOW);

    delay(100);

    if (checkButton() != CHOICE_NONE) return;

  }

}
